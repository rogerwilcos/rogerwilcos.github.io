{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"discard","disambiguator":[12986654209648815934,18403659943719353568]},"crate_root":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/discard-1.0.3/src","external_crates":[{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/discard-1.0.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6690821744989451171,12722485675148980042]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/discard-1.0.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[10299290867857879957,2307737600398321203]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/discard-1.0.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17267071439186188524,5947090075777801632]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/discard-1.0.3/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[12085692184376180030,2325848497309868957]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/discard-1.0.3/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[8936839347964662191,1155355671254815164]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/discard-1.0.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[18336025989301664450,7896662295594103842]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/discard-1.0.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14486904687815477866,12169648779788530669]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/discard-1.0.3/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[11674437890728707375,109782440169229110]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/discard-1.0.3/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[18057859910026617710,15742936179991399960]}}],"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":10330,"line_start":1,"line_end":308,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":10330,"line_start":1,"line_end":308,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/discard-1.0.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":12},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":16},{"krate":0,"index":22},{"krate":0,"index":26},{"krate":0,"index":32}],"decl_id":null,"docs":" There are situations where you need to intentionally leak *some*\n memory but not *other* memory. This crate can help!","sig":null,"attributes":[{"value":"deny(missing_docs, missing_debug_implementations)","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4122,"byte_end":4185,"line_start":94,"line_end":97,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":12},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5296,"byte_end":5303,"line_start":117,"line_end":117,"column_start":11,"column_end":18},"name":"Discard","qualname":"::Discard","value":"Discard","parent":null,"children":[{"krate":0,"index":14}],"decl_id":null,"docs":" This trait is very similar to [`Drop`](https://doc.rust-lang.org/std/ops/trait.Drop.html):\n it allows for cleaning up memory and resources when they are no longer needed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5500,"byte_end":5507,"line_start":122,"line_end":122,"column_start":8,"column_end":15},"name":"discard","qualname":"::Discard::discard","value":"fn (self) -> ()","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" This consumes the value and cleans up any memory / resources / etc. that the value was\n using.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6650,"byte_end":6663,"line_start":150,"line_end":150,"column_start":12,"column_end":25},"name":"DiscardOnDrop","qualname":"::DiscardOnDrop","value":"","parent":null,"children":[],"decl_id":null,"docs":" If you have a value which implements [`Discard`](trait.Discard.html), you can use\n [`DiscardOnDrop::new(value)`](struct.DiscardOnDrop.html#method.new) which will wrap the value.\n When the wrapper is dropped it will automatically call [`value.discard()`](trait.Discard.html#tymethod.discard).","sig":null,"attributes":[{"value":"must_use =\n      \"\\n\\n     The DiscardOnDrop is unused, which causes it to be immediately discarded.\\n     You probably don\\'t want that to happen.\\n\\n     How to fix this:\\n\\n       * Store the DiscardOnDrop in a variable or data structure.\\n\\n       * Or use the DiscardOnDrop::leak function which will cause it to not be\\n         discarded (this *will* leak memory!).\\n\\n     See the documentation for more details.\\n\"","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6216,"byte_end":6621,"line_start":135,"line_end":148,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7007,"byte_end":7010,"line_start":159,"line_end":159,"column_start":12,"column_end":15},"name":"new","qualname":"<DiscardOnDrop<A>>::new","value":"fn (discarder: A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `DiscardOnDrop`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6986,"byte_end":6995,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7613,"byte_end":7617,"line_start":173,"line_end":173,"column_start":12,"column_end":16},"name":"leak","qualname":"<DiscardOnDrop<A>>::leak","value":"fn (mut this: Self) -> A","parent":null,"children":[],"decl_id":null,"docs":" Returns the wrapped `discarder`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7592,"byte_end":7601,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6706,"byte_end":6719,"line_start":152,"line_end":152,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7786,"byte_end":7799,"line_start":181,"line_end":181,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8036,"byte_end":8049,"line_start":192,"line_end":192,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8284,"byte_end":8297,"line_start":204,"line_end":204,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6706,"byte_end":6719,"line_start":152,"line_end":152,"column_start":18,"column_end":31},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":36},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7786,"byte_end":7799,"line_start":181,"line_end":181,"column_start":27,"column_end":40},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":36},"to":{"krate":2,"index":1996}},{"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8036,"byte_end":8049,"line_start":192,"line_end":192,"column_start":28,"column_end":41},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":36},"to":{"krate":2,"index":1968}},{"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,115,99,97,114,100,45,49,46,48,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8284,"byte_end":8297,"line_start":204,"line_end":204,"column_start":31,"column_end":44},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":36},"to":{"krate":2,"index":1986}}]}