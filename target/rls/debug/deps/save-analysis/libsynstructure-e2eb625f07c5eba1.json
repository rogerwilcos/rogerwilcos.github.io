{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"synstructure","disambiguator":[10970052297896609865,17795957932396654844]},"crate_root":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src","external_crates":[{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6690821744989451171,12722485675148980042]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[10299290867857879957,2307737600398321203]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17267071439186188524,5947090075777801632]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[12085692184376180030,2325848497309868957]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[8936839347964662191,1155355671254815164]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[18336025989301664450,7896662295594103842]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14486904687815477866,12169648779788530669]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[11674437890728707375,109782440169229110]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[18057859910026617710,15742936179991399960]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":10,"id":{"name":"proc_macro","disambiguator":[17118165833280185184,4857782811889843647]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":11,"id":{"name":"syntax","disambiguator":[11947756987578785878,2106754675647243734]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":12,"id":{"name":"bitflags","disambiguator":[12545880441282845878,9308873486798315144]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":13,"id":{"name":"serialize","disambiguator":[18413735787025936533,6730971067450924698]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":14,"id":{"name":"log","disambiguator":[8877583545977286403,7620735264597603582]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":15,"id":{"name":"cfg_if","disambiguator":[10192202722970050814,1005642240025655353]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":16,"id":{"name":"rustc_errors","disambiguator":[13397685416847643314,14707286514936441205]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":17,"id":{"name":"atty","disambiguator":[10350626550780117708,14839419945004245620]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":18,"id":{"name":"libc","disambiguator":[4887482772728630433,4486904281519408242]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":19,"id":{"name":"termcolor","disambiguator":[8466529396492855015,14512770337080435016]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":20,"id":{"name":"rustc_data_structures","disambiguator":[8611598835051061743,13308568204081947053]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":21,"id":{"name":"ena","disambiguator":[15596335973875861554,12691179953512595274]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":22,"id":{"name":"parking_lot","disambiguator":[8778604633587124969,16725630250362886915]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":23,"id":{"name":"owning_ref","disambiguator":[7998253827445343892,15542944921365103177]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":24,"id":{"name":"stable_deref_trait","disambiguator":[1259250659623541323,6953509150087657506]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":25,"id":{"name":"parking_lot_core","disambiguator":[11041669653692739506,1472231954908662428]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":26,"id":{"name":"rand","disambiguator":[17032415106532443091,17478754943800521686]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":27,"id":{"name":"smallvec","disambiguator":[10641602681475613123,2259247668527767017]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":28,"id":{"name":"rustc_rayon","disambiguator":[11615377246248354282,13118920901812284081]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":29,"id":{"name":"rustc_rayon_core","disambiguator":[2637466332107880109,12401376688117435615]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":30,"id":{"name":"crossbeam_deque","disambiguator":[6367899365680132389,10679807668293170038]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":31,"id":{"name":"crossbeam_epoch","disambiguator":[2616498617380949933,17143035848099443248]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":32,"id":{"name":"nodrop","disambiguator":[7802964842696431148,40238972080952577]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":33,"id":{"name":"arrayvec","disambiguator":[13690565706963234091,12937301386415801082]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":34,"id":{"name":"crossbeam_utils","disambiguator":[9517824612456356685,10672908259796797237]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":35,"id":{"name":"lazy_static","disambiguator":[12171416912157024339,11712539485834914968]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":36,"id":{"name":"memoffset","disambiguator":[2619351188408020947,12920710959609511582]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":37,"id":{"name":"scopeguard","disambiguator":[81056136535566548,11447315654686891304]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":38,"id":{"name":"num_cpus","disambiguator":[7692913298371206550,3710354831690847504]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":39,"id":{"name":"either","disambiguator":[9569769918571595116,14025379623353541523]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":40,"id":{"name":"rustc_hash","disambiguator":[11791626541850753295,2222645719652062568]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":41,"id":{"name":"byteorder","disambiguator":[14505694122803883532,7952474230221211348]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":42,"id":{"name":"rustc_cratesio_shim","disambiguator":[9682381032503903629,16113202537507909486]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":43,"id":{"name":"syntax_pos","disambiguator":[10635160253065786311,10042622901163824404]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":44,"id":{"name":"arena","disambiguator":[16419253020063407967,5836658399989587046]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":45,"id":{"name":"scoped_tls","disambiguator":[11198138631332581562,8094241996415202470]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":46,"id":{"name":"unicode_width","disambiguator":[7687642043491729839,7672994486043049319]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":47,"id":{"name":"rustc_target","disambiguator":[7202350441808890425,6397701043533205640]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":48,"id":{"name":"quote","disambiguator":[1099069532024588238,3402591031622123006]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":49,"id":{"name":"syn","disambiguator":[15831597908792067354,8281469201403016927]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":50,"id":{"name":"unicode_xid","disambiguator":[17207275350763642390,1384897601106161051]}},{"file_name":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","num":51,"id":{"name":"synom","disambiguator":[14147024258025222501,6261498834372920672]}}],"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":44437,"line_start":1,"line_end":1469,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":44804,"byte_end":44805,"line_start":9,"line_end":9,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":54}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":44876,"byte_end":44877,"line_start":13,"line_end":13,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":58}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":44948,"byte_end":44949,"line_start":17,"line_end":17,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":62}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":44437,"line_start":1,"line_end":1469,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":40},{"krate":0,"index":46},{"krate":0,"index":52},{"krate":0,"index":172},{"krate":0,"index":192},{"krate":0,"index":190},{"krate":0,"index":186},{"krate":0,"index":182},{"krate":0,"index":178},{"krate":0,"index":174},{"krate":0,"index":70},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":196},{"krate":0,"index":216},{"krate":0,"index":212},{"krate":0,"index":206},{"krate":0,"index":202},{"krate":0,"index":198},{"krate":0,"index":78},{"krate":0,"index":82},{"krate":0,"index":220},{"krate":0,"index":242},{"krate":0,"index":240},{"krate":0,"index":236},{"krate":0,"index":230},{"krate":0,"index":226},{"krate":0,"index":222},{"krate":0,"index":246},{"krate":0,"index":266},{"krate":0,"index":262},{"krate":0,"index":256},{"krate":0,"index":252},{"krate":0,"index":248},{"krate":0,"index":90},{"krate":0,"index":100},{"krate":0,"index":270},{"krate":0,"index":290},{"krate":0,"index":286},{"krate":0,"index":280},{"krate":0,"index":276},{"krate":0,"index":272},{"krate":0,"index":130}],"decl_id":null,"docs":" This crate provides helper types for matching against enum variants, and\n extracting bindings to each of the fields in the deriving Struct or Enum in\n a generic way.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":52},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/macros.rs","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":58},{"krate":0,"index":62},{"krate":0,"index":66},{"krate":0,"index":68}],"decl_id":null,"docs":" This module provides two utility macros for testing custom derives. They can\n be used together to eliminate some of the boilerplate required in order to\n declare and test custom derive implementations.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":44781,"byte_end":44784,"line_start":8,"line_end":8,"column_start":9,"column_end":12},"name":"syn","qualname":"::macros::syn","value":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/macros.rs","parent":null,"children":[{"krate":0,"index":56}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":44849,"byte_end":44854,"line_start":12,"line_end":12,"column_start":9,"column_end":14},"name":"quote","qualname":"::macros::quote","value":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/macros.rs","parent":null,"children":[{"krate":0,"index":60}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":62},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,109,97,99,114,111,115,46,114,115],"byte_start":44911,"byte_end":44921,"line_start":16,"line_end":16,"column_start":9,"column_end":19},"name":"proc_macro","qualname":"::macros::proc_macro","value":"/home/ilyadruzhinin/.cargo/registry/src/github.com-1ecc6299db9ec823/synstructure-0.6.1/src/macros.rs","parent":null,"children":[{"krate":0,"index":64}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":105},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4684,"byte_end":4688,"line_start":160,"line_end":160,"column_start":5,"column_end":9},"name":"Move","qualname":"::BindStyle::Move","value":"BindStyle::Move","parent":{"krate":0,"index":172},"children":[],"decl_id":null,"docs":" `x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":107},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4710,"byte_end":4717,"line_start":162,"line_end":162,"column_start":5,"column_end":12},"name":"MoveMut","qualname":"::BindStyle::MoveMut","value":"BindStyle::MoveMut","parent":{"krate":0,"index":172},"children":[],"decl_id":null,"docs":" `mut x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":109},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4739,"byte_end":4742,"line_start":164,"line_end":164,"column_start":5,"column_end":8},"name":"Ref","qualname":"::BindStyle::Ref","value":"BindStyle::Ref","parent":{"krate":0,"index":172},"children":[],"decl_id":null,"docs":" `ref x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":111},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4768,"byte_end":4774,"line_start":166,"line_end":166,"column_start":5,"column_end":11},"name":"RefMut","qualname":"::BindStyle::RefMut","value":"BindStyle::RefMut","parent":{"krate":0,"index":172},"children":[],"decl_id":null,"docs":" `ref mut x`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":172},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4656,"byte_end":4665,"line_start":158,"line_end":158,"column_start":10,"column_end":19},"name":"BindStyle","qualname":"::BindStyle","value":"BindStyle::{Move, MoveMut, Ref, RefMut}","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":111}],"decl_id":null,"docs":" The type of binding to use when generating a pattern.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4647,"byte_end":4777,"line_start":158,"line_end":167,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4647,"byte_end":4777,"line_start":158,"line_end":167,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":196},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6152,"byte_end":6163,"line_start":213,"line_end":213,"column_start":12,"column_end":23},"name":"BindingInfo","qualname":"::BindingInfo","value":"BindingInfo { binding, style }","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":125}],"decl_id":null,"docs":" Information about a specific binding. This contains both an `Ident`\n reference to the given field, and the syn `&'a Field` descriptor for that\n field.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6141,"byte_end":6494,"line_start":213,"line_end":225,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":117},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6232,"byte_end":6239,"line_start":215,"line_end":215,"column_start":9,"column_end":16},"name":"binding","qualname":"::BindingInfo::binding","value":"syn::Ident","parent":{"krate":0,"index":196},"children":[],"decl_id":null,"docs":" The name which this BindingInfo will bind to.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":119},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6321,"byte_end":6326,"line_start":218,"line_end":218,"column_start":9,"column_end":14},"name":"style","qualname":"::BindingInfo::style","value":"BindStyle","parent":{"krate":0,"index":196},"children":[],"decl_id":null,"docs":" The type of binding which this BindingInfo will create.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6775,"byte_end":6778,"line_start":236,"line_end":236,"column_start":12,"column_end":15},"name":"ast","qualname":"<BindingInfo<'a>>::ast","value":"fn (&self) -> &'a Field","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `syn` AST node which this\n `BindingInfo` references\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7478,"byte_end":7481,"line_start":265,"line_end":265,"column_start":12,"column_end":15},"name":"pat","qualname":"<BindingInfo<'a>>::pat","value":"fn (&self) -> Tokens","parent":null,"children":[],"decl_id":null,"docs":" Generates the pattern fragment for this field binding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8560,"byte_end":8580,"line_start":304,"line_end":304,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<BindingInfo<'a>>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are referenced in this\n field's type.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":220},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9042,"byte_end":9052,"line_start":314,"line_end":314,"column_start":12,"column_end":22},"name":"VariantAst","qualname":"::VariantAst","value":"VariantAst { ident, attrs, data, discriminant }","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":147}],"decl_id":null,"docs":" This type is similar to `syn`'s `Variant` type, however each of the fields\n are references rather than owned. When this is used as the AST for a real\n variant, this struct simply borrows the fields of the `syn` `Variant`,\n however this type may also be used as the sole variant for astruct.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9031,"byte_end":9194,"line_start":314,"line_end":319,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9031,"byte_end":9194,"line_start":314,"line_end":319,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":141},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9067,"byte_end":9072,"line_start":315,"line_end":315,"column_start":9,"column_end":14},"name":"ident","qualname":"::VariantAst::ident","value":"&'a syn::Ident","parent":{"krate":0,"index":220},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":143},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9093,"byte_end":9098,"line_start":316,"line_end":316,"column_start":9,"column_end":14},"name":"attrs","qualname":"::VariantAst::attrs","value":"&'a [syn::Attribute]","parent":{"krate":0,"index":220},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":145},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9125,"byte_end":9129,"line_start":317,"line_end":317,"column_start":9,"column_end":13},"name":"data","qualname":"::VariantAst::data","value":"&'a syn::VariantData","parent":{"krate":0,"index":220},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":147},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9156,"byte_end":9168,"line_start":318,"line_end":318,"column_start":9,"column_end":21},"name":"discriminant","qualname":"::VariantAst::discriminant","value":"&'a std::option::Option<syn::ConstExpr>","parent":{"krate":0,"index":220},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":246},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9389,"byte_end":9400,"line_start":324,"line_end":324,"column_start":12,"column_end":23},"name":"VariantInfo","qualname":"::VariantInfo","value":"VariantInfo { prefix }","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":173}],"decl_id":null,"docs":" A wrapper around a `syn` `DeriveInput`'s variant which provides utilities\n for destructuring `Variant`s with `match` expressions.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9378,"byte_end":9558,"line_start":324,"line_end":330,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":165},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9415,"byte_end":9421,"line_start":325,"line_end":325,"column_start":9,"column_end":15},"name":"prefix","qualname":"::VariantInfo::prefix","value":"std::option::Option<&'a syn::Ident>","parent":{"krate":0,"index":246},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12031,"byte_end":12039,"line_start":405,"line_end":405,"column_start":12,"column_end":20},"name":"bindings","qualname":"<VariantInfo<'a>>::bindings","value":"fn (&self) -> &[BindingInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of the bindings in this Variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12173,"byte_end":12185,"line_start":410,"line_end":410,"column_start":12,"column_end":24},"name":"bindings_mut","qualname":"<VariantInfo<'a>>::bindings_mut","value":"fn (&mut self) -> &mut [BindingInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mut slice of the bindings in this Variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12414,"byte_end":12417,"line_start":416,"line_end":416,"column_start":12,"column_end":15},"name":"ast","qualname":"<VariantInfo<'a>>::ast","value":"fn (&self) -> VariantAst<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `VariantAst` object which contains references to the\n underlying `syn` AST node which this `Variant` was created from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12546,"byte_end":12562,"line_start":421,"line_end":421,"column_start":12,"column_end":28},"name":"omitted_bindings","qualname":"<VariantInfo<'a>>::omitted_bindings","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if any bindings were omitted due to a `filter` call.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13296,"byte_end":13299,"line_start":450,"line_end":450,"column_start":12,"column_end":15},"name":"pat","qualname":"<VariantInfo<'a>>::pat","value":"fn (&self) -> Tokens","parent":null,"children":[],"decl_id":null,"docs":" Generates the match-arm pattern which could be used to match against this Variant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15484,"byte_end":15493,"line_start":525,"line_end":525,"column_start":12,"column_end":21},"name":"construct","qualname":"<VariantInfo<'a>>::construct","value":"fn <F, T> (&self, mut func: F) -> Tokens","parent":null,"children":[],"decl_id":null,"docs":" Generates the token stream required to construct the current variant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17602,"byte_end":17606,"line_start":594,"line_end":594,"column_start":12,"column_end":16},"name":"each","qualname":"<VariantInfo<'a>>::each","value":"fn <F, R> (&self, mut f: F) -> Tokens","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in a `BindingInfo`.\n and generating a `match` arm which evaluates the returned tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19001,"byte_end":19005,"line_start":642,"line_end":642,"column_start":12,"column_end":16},"name":"fold","qualname":"<VariantInfo<'a>>::fold","value":"fn <F, I, R> (&self, init: I, mut f: F) -> Tokens","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in the\n result of the previous call, and a `BindingInfo`. generating a `match`\n arm which evaluates to the resulting tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20699,"byte_end":20705,"line_start":698,"line_end":698,"column_start":12,"column_end":18},"name":"filter","qualname":"<VariantInfo<'a>>::filter","value":"fn <F> (&mut self, f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the bindings created by this `Variant` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21127,"byte_end":21141,"line_start":715,"line_end":715,"column_start":12,"column_end":26},"name":"remove_binding","qualname":"<VariantInfo<'a>>::remove_binding","value":"fn (&mut self, idx: usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Remove the binding at the given index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22351,"byte_end":22360,"line_start":756,"line_end":756,"column_start":12,"column_end":21},"name":"bind_with","qualname":"<VariantInfo<'a>>::bind_with","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the `BindStyle` for each of the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23871,"byte_end":23883,"line_start":807,"line_end":807,"column_start":12,"column_end":24},"name":"binding_name","qualname":"<VariantInfo<'a>>::binding_name","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the binding name for each fo the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25041,"byte_end":25061,"line_start":847,"line_end":847,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<VariantInfo<'a>>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are referenced in this\n field's type.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":270},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25471,"byte_end":25480,"line_start":859,"line_end":859,"column_start":12,"column_end":21},"name":"Structure","qualname":"::Structure","value":"Structure {  }","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":193}],"decl_id":null,"docs":" A wrapper around a `syn` `DeriveInput` which provides utilities for creating\n custom derive trait implementations.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25460,"byte_end":25578,"line_start":859,"line_end":863,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25720,"byte_end":25723,"line_start":868,"line_end":868,"column_start":12,"column_end":15},"name":"new","qualname":"<Structure<'a>>::new","value":"fn (ast: &'a DeriveInput) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Structure` with the variants and fields from the passed-in\n `DeriveInput`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27109,"byte_end":27117,"line_start":910,"line_end":910,"column_start":12,"column_end":20},"name":"variants","qualname":"<Structure<'a>>::variants","value":"fn (&self) -> &[VariantInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of the variants in this Structure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27253,"byte_end":27265,"line_start":915,"line_end":915,"column_start":12,"column_end":24},"name":"variants_mut","qualname":"<Structure<'a>>::variants_mut","value":"fn (&mut self) -> &mut [VariantInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mut slice of the variants in this Structure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27460,"byte_end":27463,"line_start":921,"line_end":921,"column_start":12,"column_end":15},"name":"ast","qualname":"<Structure<'a>>::ast","value":"fn (&self) -> &'a DeriveInput","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `syn` AST node which this\n `Structure` was created from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27602,"byte_end":27618,"line_start":926,"line_end":926,"column_start":12,"column_end":28},"name":"omitted_variants","qualname":"<Structure<'a>>::omitted_variants","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if any variants were omitted due to a `filter_variants` call.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28838,"byte_end":28842,"line_start":966,"line_end":966,"column_start":12,"column_end":16},"name":"each","qualname":"<Structure<'a>>::each","value":"fn <F, R> (&self, mut f: F) -> Tokens","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in a `BindingInfo`.\n and generating `match` arms which evaluate the returned tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30415,"byte_end":30419,"line_start":1019,"line_end":1019,"column_start":12,"column_end":16},"name":"fold","qualname":"<Structure<'a>>::fold","value":"fn <F, I, R> (&self, init: I, mut f: F) -> Tokens","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in the\n result of the previous call, and a `BindingInfo`. generating `match`\n arms which evaluate to the resulting tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32021,"byte_end":32033,"line_start":1074,"line_end":1074,"column_start":12,"column_end":24},"name":"each_variant","qualname":"<Structure<'a>>::each_variant","value":"fn <F, R> (&self, mut f: F) -> Tokens","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each variant, passing in a\n `VariantInfo`. and generating `match` arms which evaluate the returned\n tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33769,"byte_end":33775,"line_start":1131,"line_end":1131,"column_start":12,"column_end":18},"name":"filter","qualname":"<Structure<'a>>::filter","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the bindings created by this `Structure` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35157,"byte_end":35172,"line_start":1179,"line_end":1179,"column_start":12,"column_end":27},"name":"filter_variants","qualname":"<Structure<'a>>::filter_variants","value":"fn <F> (&mut self, f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the variants matched by this `Structure` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35596,"byte_end":35610,"line_start":1196,"line_end":1196,"column_start":12,"column_end":26},"name":"remove_variant","qualname":"<Structure<'a>>::remove_variant","value":"fn (&mut self, idx: usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Remove the variant at the given index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36808,"byte_end":36817,"line_start":1237,"line_end":1237,"column_start":12,"column_end":21},"name":"bind_with","qualname":"<Structure<'a>>::bind_with","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the `BindStyle` for each of the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38288,"byte_end":38300,"line_start":1288,"line_end":1288,"column_start":12,"column_end":24},"name":"binding_name","qualname":"<Structure<'a>>::binding_name","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the binding name for each fo the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":39486,"byte_end":39506,"line_start":1330,"line_end":1330,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<Structure<'a>>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are refrenced in the types\n of non-filtered fields / variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":40188,"byte_end":40204,"line_start":1348,"line_end":1348,"column_start":12,"column_end":28},"name":"add_trait_bounds","qualname":"<Structure<'a>>::add_trait_bounds","value":"fn (&self, bound: &TyParamBound, preds: &mut Vec<WherePredicate>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add trait bounds for a trait with the given path for each type parmaeter\n referenced in the types of non-filtered fields.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42585,"byte_end":42595,"line_start":1423,"line_end":1423,"column_start":12,"column_end":22},"name":"bound_impl","qualname":"<Structure<'a>>::bound_impl","value":"fn <P, B> (&self, bound: P, body: B) -> Tokens","parent":null,"children":[],"decl_id":null,"docs":" Creates an `impl` block with the required generic type fields filled in\n to implement the trait `path`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":43342,"byte_end":43359,"line_start":1442,"line_end":1442,"column_start":12,"column_end":29},"name":"unsafe_bound_impl","qualname":"<Structure<'a>>::unsafe_bound_impl","value":"fn <P, B> (&self, path: P, body: B) -> Tokens","parent":null,"children":[],"decl_id":null,"docs":" This method is the same as `bound_impl`, except also includes the\n `unsafe` keyword for implementing unsafe traits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":43628,"byte_end":43640,"line_start":1449,"line_end":1449,"column_start":12,"column_end":24},"name":"unbound_impl","qualname":"<Structure<'a>>::unbound_impl","value":"fn <P, B> (&self, bound: P, body: B) -> Tokens","parent":null,"children":[],"decl_id":null,"docs":" This method is like `bound_impl` but doesn't add the additional bounds\n to the where clause.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44266,"byte_end":44285,"line_start":1465,"line_end":1465,"column_start":12,"column_end":31},"name":"unsafe_unbound_impl","qualname":"<Structure<'a>>::unsafe_unbound_impl","value":"fn <P, B> (&self, path: P, body: B) -> Tokens","parent":null,"children":[],"decl_id":null,"docs":" This method is the same as `unbound_impl`, except also includes the\n `unsafe` keyword for implementing unsafe traits.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4797,"byte_end":4806,"line_start":169,"line_end":169,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6518,"byte_end":6529,"line_start":227,"line_end":227,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6641,"byte_end":6652,"line_start":233,"line_end":233,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10063,"byte_end":10079,"line_start":343,"line_end":343,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11013,"byte_end":11024,"line_start":376,"line_end":376,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25589,"byte_end":25598,"line_start":865,"line_end":865,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4529,"byte_end":4535,"line_start":154,"line_end":154,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":52}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4797,"byte_end":4806,"line_start":169,"line_end":169,"column_start":19,"column_end":28},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":172},"to":{"krate":48,"index":56}},{"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6518,"byte_end":6529,"line_start":227,"line_end":227,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":196},"to":{"krate":48,"index":56}},{"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6641,"byte_end":6652,"line_start":233,"line_end":233,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":196},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10063,"byte_end":10079,"line_start":343,"line_end":343,"column_start":26,"column_end":42},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":92},"to":{"krate":49,"index":894}},{"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11013,"byte_end":11024,"line_start":376,"line_end":376,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,105,108,121,97,100,114,117,122,104,105,110,105,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,54,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25589,"byte_end":25598,"line_start":865,"line_end":865,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":270},"to":{"krate":4294967295,"index":4294967295}}]}